#!/usr/bin/env bash

# Copyright (c) 2024 xmonad-config-NajibMalaysia
# Licensed under the BSD 3-Clause License. See LICENSE file for details.

#
#  Get waktu solat formated to be use by xmobar
#
#  by Muhammad Najib Bin Ibrahim <mnajib@gmail.com>
#
#  Usage:
#      waktusolat-hbar SGR01
#      waktusolat-hbar WLY01
#      waktusolat-hbar MLK01
#      waktusolat-hbar TRG01
#

# source FILE
source "${HOME}/.xmonad/bin/lib/waktusolatlib.sh"
#
source "${HOME}/.xmonad/bin/lib/logger.sh"
source "${HOME}/.xmonad/bin/lib/maybe.sh"
source "${HOME}/.xmonad/bin/lib/helpers.sh"

#---------------------------------------------------------------------

# inputs
FILE1=/tmp/${USER}-wsp1         # source data file
FILE2=/tmp/${USER}-wsp2         # one-line result waktu solat formated for xmobar
FILE3=/tmp/${USER}-wsp1.bak     # backup good source data file
# outputs
PRAYER_TIMES_FILE="/tmp/${USER}-prayer_times_file"
PRAYER_REMINDER_FILE="/tmp/${USER}-prayer_reminder_file"
# log
LOG_FILE="/tmp/${USER}-wsp.log"        # for logging
LOG_LEVEL="SILENT" # "SILENT" "NORMAL" "INFO" "DEBUG" # "silent", "info", "warning", or "debug"

#---------------------------------------------------------------------

LOGFILE="$LOG_FILE"        # for logging
#
set_log_file "$LOGFILE"
#
#set_log_level "silent"
#set_log_level "info"
#set_log_level "debug"
set_log_level "$LOG_LEVEL"
#
log_debug "LOG_FILE: ${LOG_FILE}"
log_debug "LOG_LEVEL: ${LOG_LEVEL}"

ONELINE=""
NAMASOLAT=()
MASASOLAT=()
KAWASAN=""
ZON=""
zone=$1
BEARING=""
TITLE=""
ERROR=false
HDATE=""
MDATE=""
MDATETIME=""
DAY=""
STATUS=""
HMONTHFULLNAME=""
MMONTHFULLNAME=""

#LOGMODE="NORMAL"
#LOGMODE="INFO"
#LOGMODE="DEBUG"
LOGMODE="$LOG_LEVEL"

#
# Usage:
#     log INFO "Length error."
#     log DEBUG "Start fetchData()."
#
#log () {
#    local logmode=$1
#    local logstring=$2
#    #local logfile=$3
#
#    # Will use global var: LOG, LOGMODE
#    if [ "$LOGMODE" = "DEBUG" ]; then
#        # For debugging purpose, log all information
#        echo "`date "+%F %T"` ${logmode}: ${logstring}" >> $LOGFILE
#    elif [ "$LOGMODE" = "NORMAL" ] && [ "$logmode" = "ERROR" ]; then
#        # Normally, just log general information
#        echo "`date "+%F %T"` ${logmode}: ${logstring}" >> $LOGFILE
#    elif [ "$LOGMODE" = "INFO" ] && [ "$logmode" = "INFO" ]; then
#        echo "`date "+%F %T"` ${logmode}: ${logstring}" >> $LOGFILE
#    elif [ "${logmode}" = "ERROR" ]; then
#        echo "`date "+%F %T"` ${logmode}: ${logstring}" >> $LOGFILE
#    fi
#}

createFifo(){
    mkfifo $PIPE
    mkfifo $LOGFILE
}

cleanup-socket(){
    local SOCKET=$1
    [[ -e "$SOCKET" ]] && rm "$SOCKET"
    sleep 2
}

# Start a socket listener in the background
start-socket() {
    local SOCKET=$1
    socat -u UNIX-LISTEN:"$SOCKET" - &
}

sleepLengthInSeconds() {
    local s="$1" # string
    log DEBUG "String: ${s}"
    local size=${#s}
    log DEBUG "String size: ${size}"

    #i=$(( ($size / 5) * 60 ))
    i=$(( ($size / 10) * 60 ))
    #echo "$(( ($size / 5) * 60 ))"
}

dreamInSleep() {
    local DIRATION=$1  # Total duration in seconds
    local FIFO=$2
    local TEXT=$3

    #local duration=10  # Total duration in seconds
    local interval=1   # Update interval

    #echo -n "Progress: "
    for (( i = 0; i < $DURATION; i += $interval )); do
        #echo -n "#"
        #cat "$FIFO" &> /dev/null
        pushStringToPipe "${TEXT}" "${FIFO}"
        sleep $interval
    done

    #echo " Done!"
}

pushStringToFile() {
    local STRING=$1
    local FILE=$2
    log DEBUG "pushStringToFile: ${STRING}"
    echo "$STRING" > "$FILE"
    #echo -en "${STRING}\n" > "$FILE"
}

# Usage: pushStringToPipe <string> <pipefile>
# Example: pushStringToPipe "string" "/tmp/thepipefile"
pushStringToPipe() {
    local STRING=$1
    local PIPE=$2
    log DEBUG "pushStringToPipe: ${STRING}"
    echo "${STRING}" > $PIPE
    #echo -en "${STRING}\n" > $PIPE
}

pushStringToSocket() {
    local STRING=$1
    local SOCKET=$2
    log DEBUG "pushStringToSocket: ${STRING}"
    #echo "Maghrib: 19:02, Isyak: 20:16, Subuh: 05:52" | socat -u - UNIX-CONNECT:"$SOCKET"
    echo "$1" | socat -u - UNIX-CONNECT:"$SOCKET"
}

# Usage:
#   loopCommandUntilSeconds <countdowntime_in_seconds> <command_to_run>
# Example:
#   loopCommandUntilSeconds 10 "echo 'Hello, World!'"
loopCommandUntilSeconds() {
    countdown_time=$1 # in seconds
    command="$2"

    # Check if countdown_time is a valid number
    if ! [[ "$countdown_time" =~ ^[0-9]+$ ]]; then
        echo "Error: countdown_time must be a non-negative integer."
        return 1
    fi

    while (( $countdown_time > 0 )); do
        eval "${command}" # Use eval to handle commands with arguments
        sleep 1
        (( $countdown_time-- ))
    done
}


#----------------------------------------------------------------------

log DEBUG "==============================="
log DEBUG "Start waktusolat-putrajaya-hbar"

timeInterval1=`echo "60 * 60 * 3" | bc`       # every 3 hours
timeInterval2=`echo "60 * 1" | bc`            # every 1 minutes; used this if last fetch was failed
timeInterval=${timeInterval1}

# Clean up previous socket
cleanup-socket "$SOCKET"

while true; do
    log DEBUG "-------------------------------"
    log DEBUG "`date` : Start main loop"

    ## Note:
    ##waktu=`~/.xmonad/waktusolat-putrajaya-hbar`
    ##echo -en "$waktu\n" # <-- may need '\n"

    resetData

    fetchDataZone $zone #fetchData
    #simulateFetchData
    #simulateFailFetchData
    #setBlankDataToArray # may need revise

    extractData
    checkData
    log DEBUG "ERROR --> ${ERROR}"

    if $ERROR; then
        resetData
        log DEBUG "Decrease fetch time interval"
        timeInterval=${timeInterval2}

        log DEBUG "Getting old backup data"
        getOldGoodFetchData
        extractData

        #echo "Start setup blank data" >> $LOG
        #setBlankDataToArray
    else
        log DEBUG "Do backup and reset fetch time interval"
        doBackup
        timeInterval=${timeInterval1}
    fi

    # TODO: Maybe will get option to print for plain text only, for CLI
    #
    # Usage:
    #     waktusolat-putrajaya-hbar
    #     waktusolat-putrajaya-hbar cli
    #     waktusolat-putrajaya-hbar xmobar
    #
    formatWaktuSolatForXmobar

    new_waktu_solat="$(printNewWaktuSolat)"

    #log INFO "pushStringToFile ${PRAYER_TIMES_FILE}"
    #log INFO "$new_waktu_solat"
    log_debug "$new_waktu_solat"
    log DEBUG "$new_waktu_solat"


    #-----------------------------------------------------------------------
    # Basic (without coloring for attentions/reminder)
    #-----------------------------------------------------------------------
#   echo "$new_waktu_solat"
    #pushStringToFile "$(printNewWaktuSolat)" "${PRAYER_TIMES_FILE}"
    #pushStringToFile "${new_waktu_solat}" "${PRAYER_TIMES_FILE}"

    # TODO: Sleep interval mayneed change base on if ERROR occour
    # if ERROR ; then
    # ...
    #
    # Do sleep for ${timeInterval}
#   log DEBUG "Do sleep for ${timeInterval}"
#   sleep ${timeInterval}
    #-----------------------------------------------------------------------
    # With coloring/blinking/reminder
    #-----------------------------------------------------------------------
    # Do something for ${timeInterval}
    #loopCommandUntilSeconds 10 "echo 'Hello, World!'"
    #loopCommandUntilSeconds ${timeInterval} "${process_reminder} ${new_waktu_solat}"
    countdown_time=$timeInterval
    toggle=0 # Initial toggle state
    line="$new_waktu_solat"
    while (( $countdown_time > 0 )); do
        current_time=$(date +"%H:%M")
        #log_debug "inner loop: `date`"
        #log_info "inner loop: `date`"
        #log DEBUG "inner loop: `date`"
        #log INFO "inner loop: `date`"

        # Process the prayer times using the current toggle state
        #pure_process_prayer_entry "$line" "$current_time" "$toggle" > "$fifo"
        #echo "$(pure_process_prayer_entry "$line" "$current_time" "$toggle")"
        final_output="$(pure_process_prayer_entry "$line" "$current_time" "$toggle")"
        #echo "$line" > "$fifo"
        #echo "$line"
        #log INFO "final_output: $final_output"
        log_info "final_output: $final_output"
        #echo "$final_output"
        pushStringToFile "${final_output}" "${PRAYER_REMINDER_FILE}"

        # Alternate the toggle state (alternate between 0 and 1)
        toggle=$((1 - $toggle))

        sleep 1
        #(( $countdown_time-- ))
        countdown_time=$((countdown_time - 1))  # Decrement the countdown time
    done
    #-----------------------------------------------------------------------
    # TODO: Use XMonadLog instead of StdinReader:
    # XMonadLog is a more efficient way to communicate with xmobar, especially for complex configurations.
    # It avoids the potential issues associated with pipes.


    log DEBUG "End main loop"
done

log DEBUG "End waktusolat-putrajaya-hbar"
